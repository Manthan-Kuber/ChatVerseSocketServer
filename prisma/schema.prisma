generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  Account                 Account[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
  Session                 Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id                                                 String        @id
  createdAt                                          DateTime      @default(now())
  body                                               String
  conversationId                                     String
  senderId                                           String
  updatedAt                                          DateTime
  Conversation_Conversation_latestMessageIdToMessage Conversation? @relation("Conversation_latestMessageIdToMessage")
  Conversation_Message_conversationIdToConversation  Conversation  @relation("Message_conversationIdToConversation", fields: [conversationId], references: [id])
  User                                               User          @relation(fields: [senderId], references: [id])
}

model Conversation {
  id                                            String                    @id
  latestMessageId                               String?                   @unique
  createdAt                                     DateTime                  @default(now())
  updatedAt                                     DateTime
  Message_Conversation_latestMessageIdToMessage Message?                  @relation("Conversation_latestMessageIdToMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ConversationParticipant                       ConversationParticipant[]
  Message_Message_conversationIdToConversation  Message[]                 @relation("Message_conversationIdToConversation")
}

model ConversationParticipant {
  id             String       @id
  userId         String
  conversationId String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}
